{"version":3,"file":"static/js/296.6f6f6826.chunk.js","mappings":"+SAGaA,EAAiBC,EAAAA,GAAAA,QAAH,0CAIdC,EAAOD,EAAAA,GAAAA,IAAH,mEAKJE,EAAOF,EAAAA,GAAAA,GAAH,oGAOJG,EAAcH,EAAAA,GAAAA,EAAH,+JAUXI,EAAOJ,EAAAA,GAAAA,GAAH,yHAQJK,EAASL,EAAAA,GAAAA,GAAH,8KAUNM,EAAaN,EAAAA,GAAAA,GAAH,8EAMVO,EAAWP,EAAAA,GAAAA,GAAH,+DAKRQ,EAAWR,EAAAA,GAAAA,GAAH,mGAORS,GAAYT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,mOAYTW,GAAYX,EAAAA,EAAAA,IAAOY,EAAAA,GAAPZ,CAAH,6U,mBCAtB,EA1DkB,SAAC,GAAe,IAAD,ICnBPa,ECAHC,EFmBFC,EAAY,EAAZA,MAEbC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAErCC,EACNL,EADMK,MAAOC,EACbN,EADaM,aAAcC,EAC3BP,EAD2BO,SAAUC,EACrCR,EADqCQ,OAAQC,EAC7CT,EAD6CS,aAAcC,EAC3DV,EAD2DU,YAG7D,OACE,UAAC1B,EAAD,YACE,4BACE,SAACY,EAAD,CAAWe,GAAIV,EAAf,SAA6B,aAC7B,gBACEW,IACEF,EAAW,0CAC4BA,GACnCG,EAENC,IAAKT,EACLU,MAAM,QACNC,OAAO,cAGX,UAAC9B,EAAD,YACE,SAACC,EAAD,UACGmB,EAAY,UAAMD,EAAN,cE3CAN,EF2CwBO,EE3ChB,IAAIW,KAAKlB,GAAMmB,eF2CvB,KAA2Cb,KAE1D,SAACjB,EAAD,UACGqB,EAAY,uBC9CGX,ED+CcW,EC/Ce,GAApBU,KAAKC,MAAMtB,ID8CvB,MAET,0BAEN,SAACT,EAAD,UAAM,eACN,SAACD,EAAD,UAAcmB,GAAsB,iBACpC,SAAClB,EAAD,UAAM,aACN,SAACC,EAAD,UACGkB,EAAOa,KAAI,SAAAC,GAAE,OACZ,SAAC/B,EAAD,UAAyB+B,EAAGC,MAAXD,EAAGE,GADR,OAKhB,SAACnC,EAAD,UAAM,4BACN,UAACG,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CAAWiB,GAAG,OAAOR,MAAO,CAAEC,KAAMH,GAApC,SAAoD,YAItD,yBACE,SAACP,EAAD,CAAWiB,GAAG,UAAUR,MAAO,CAAEC,KAAMH,GAAvC,SAAuD,sBAQlE,E,UGtBD,EA/CqB,WACnB,OAA0BwB,EAAAA,EAAAA,UAAS,MAAnC,eAAOzB,EAAP,KAAc0B,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAkBjB,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,8GAEcC,EAAAA,EAAAA,GAAY,sCAAD,OACKN,EADL,6DAFzB,OAEJO,EAFI,OAKVR,EAASQ,GALC,gDAOVC,QAAQC,IAAI,KAAMC,SAClBR,EAAS,IAAK,CAAES,SAAS,IARf,yDAAH,qDAYXN,GACD,GAAE,CAACL,EAASE,IAER7B,GAKH,gCACGA,IAAS,SAAC,EAAD,CAAWA,MAAOA,KAE5B,SAAC,KAAD,CACEuC,SAAS,YACTC,cAAc,EACdC,aAAc,CACZC,MAAO,CACLC,WAAY,oBACZC,MAAO,YAIb,SAAC,EAAAC,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,SAlBG,IAsBV,C,kECjDKb,EAAW,mCAAG,WAAMc,GAAN,uFACKC,EAAAA,EAAAA,IAAUD,GADf,cACZE,EADY,yBAGXA,EAASC,MAHE,2CAAH,sDAMjB,K","sources":["components/MovieItem/MovieItem.styled.jsx","components/MovieItem/MovieItem.jsx","servises/getRaiting.js","servises/getYear.js","pages/MovieDetails.jsx","servises/fetchMovies.js"],"sourcesContent":["import { NavLink, Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const DetailsSection = styled.section`\n  display: flex;\n`;\n\nexport const Info = styled.div`\n  margin-left: 16px;\n  margin-top: 50px;\n`;\n\nexport const Name = styled.h2`\n  color: lightgrey;\n  font-weight: 500;\n  font-size: 25px;\n  margin: 0;\n`;\n\nexport const Description = styled.p`\n  color: lightgrey;\n  font-weight: 400;\n  font-size: 14px;\n  margin: 0;\n  margin-top: 10px;\n  width: 700px;\n  line-height: 1.3;\n`;\n\nexport const Text = styled.h3`\n  color: lightgrey;\n  font-weight: 500;\n  font-size: 18px;\n  margin: 0;\n  margin-top: 10px;\n`;\n\nexport const Genres = styled.ul`\n  display: flex;\n  flex-direction: column;\n  color: lightgrey;\n  font-weight: 400;\n  font-size: 14px;\n  margin-top: 10px;\n  margin-left: 12px;\n`;\n\nexport const GenresItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n\nexport const LinkList = styled.ul`\n  display: flex;\n  margin-top: 15px;\n`;\n\nexport const LinkItem = styled.li`\n  margin-left: 12px;\n  &:not(:last-child) {\n    margin-right: 5px;\n  }\n`;\n\nexport const LinkMovie = styled(NavLink)`\n  padding: 5px 8px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: gray;\n  font-weight: 500;\n  &.active {\n    color: lightgray;\n    box-shadow: 0 0 5px 3px rgba(11, 127, 171, 0.7);\n  }\n`;\n\nexport const BtnGoBack = styled(Link)`\n  cursor: pointer;\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: gray;\n  font-weight: 500;\n  box-shadow: 0 0 5px 3px rgba(11, 127, 171, 0.7);\n  margin-bottom: 15px;\n  width: 70px;\n  display: flex;\n  justify-content: center;\n\n  &:hover {\n    color: lightgray;\n  }\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { getRaiting } from 'servises/getRaiting';\nimport { getYear } from 'servises/getYear';\nimport {\n  DetailsSection,\n  Info,\n  Name,\n  Description,\n  Text,\n  Genres,\n  GenresItem,\n  LinkList,\n  LinkItem,\n  LinkMovie,\n  BtnGoBack,\n} from './MovieItem.styled';\nimport placeholder from 'image/placeholder.jpg';\n\nconst MovieItem = ({ movie }) => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  const { title, release_date, overview, genres, vote_average, poster_path } =\n    movie;\n\n  return (\n    <DetailsSection>\n      <div>\n        <BtnGoBack to={backLinkHref}>Go back</BtnGoBack>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n              : placeholder\n          }\n          alt={title}\n          width=\"250px\"\n          height=\"375px\"\n        />\n      </div>\n      <Info>\n        <Name>\n          {release_date ? `${title} (${getYear(release_date)})` : title}\n        </Name>\n        <Description>\n          {vote_average\n            ? `User Score: ${getRaiting(vote_average)}% `\n            : 'User Score: no score'}\n        </Description>\n        <Text>Overview:</Text>\n        <Description>{overview ? overview : 'No overview'}</Description>\n        <Text>Genres:</Text>\n        <Genres>\n          {genres.map(el => (\n            <GenresItem key={el.id}>{el.name}</GenresItem>\n          ))}\n        </Genres>\n\n        <Text>Additional information</Text>\n        <LinkList>\n          <LinkItem>\n            <LinkMovie to=\"cast\" state={{ from: backLinkHref }}>\n              Cast\n            </LinkMovie>\n          </LinkItem>\n          <li>\n            <LinkMovie to=\"reviews\" state={{ from: backLinkHref }}>\n              Reviews\n            </LinkMovie>\n          </li>\n        </LinkList>\n      </Info>\n    </DetailsSection>\n  );\n};\n\nexport default MovieItem;\n\nMovieItem.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired\n    ).isRequired,\n  }).isRequired,\n};\n","export const getRaiting = value => Math.round(value) * 10;\n","export const getYear = date => new Date(date).getFullYear();\n","import { useParams, Outlet, useNavigate } from 'react-router-dom';\nimport { useState, useEffect, Suspense} from 'react';\nimport fetchMovies from 'servises/fetchMovies';\nimport MovieItem from 'components/MovieItem/MovieItem';\nimport { Toaster } from 'react-hot-toast';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const dataMovie = await fetchMovies(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=9218a8fe57d9a10810e7b861ea45534f&language=en-US`\n        );\n        setMovie(dataMovie);\n      } catch (error) {\n        console.log(error.message);\n        navigate('/', { replace: true });\n      }\n    };\n\n    fetch();\n  }, [movieId, navigate]);\n\n  if (!movie) {\n    return null;\n  }\n\n  return (\n    <>\n      {movie && <MovieItem movie={movie} />}\n\n      <Toaster\n        position=\"top-right\"\n        reverseOrder={false}\n        toastOptions={{\n          style: {\n            background: 'rgb(11, 127, 171)',\n            color: '#fff',\n          },\n        }}\n      />\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst fetchMovies = async url => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n\nexport default fetchMovies;\n"],"names":["DetailsSection","styled","Info","Name","Description","Text","Genres","GenresItem","LinkList","LinkItem","LinkMovie","NavLink","BtnGoBack","Link","value","date","movie","backLinkHref","useLocation","state","from","title","release_date","overview","genres","vote_average","poster_path","to","src","placeholder","alt","width","height","Date","getFullYear","Math","round","map","el","name","id","useState","setMovie","movieId","useParams","navigate","useNavigate","useEffect","fetch","fetchMovies","dataMovie","console","log","message","replace","position","reverseOrder","toastOptions","style","background","color","Suspense","fallback","url","axios","response","data"],"sourceRoot":""}